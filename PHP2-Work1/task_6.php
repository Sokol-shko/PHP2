<?php

class A {
    public $y = 0;

    public function foo() {
        static $x = 0;
        echo ++$x . ' ';

        echo ++$this->y;
    }
}

class B extends A {}

$a1 = new A();
$b1 = new B();

$a1->foo(); // 1 1
echo '<br>';

$b1->foo(); // 1 1
echo '<br>';

$a1->foo(); // 2 2
echo '<br>';

$b1->foo(); // 2 2
echo '<br>';

$a1->foo(); // 3 3
echo '<br>';

$a1->foo(); // 4 4
echo '<br>';

$a1->foo(); // 5 5
echo '<br>';

$b1->foo(); // 3 3
echo '<br>';

$b1->y = 555;
$a1->y = 333;

$a1->foo(); // 6 334
echo '<br>';

$b1->foo(); // 4 556
echo '<br>';

// Чтобы понять лучше, я немного продолжил код, и пришёл к следующему выводу:

// при создании экземпляра дочернего класса, создаётся независимая копия, и любые изменения через экземпляры a1 и b1
// не зависят друг от друга, т.е. при создании экземпляра класса наследника, наследник берёт все начальные данные
// у родителя, но поотом, любые изменения происходят раздельно